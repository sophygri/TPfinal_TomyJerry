# -*- coding: utf-8 -*-
"""TP FINAL CHONA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QElM2lONut_qWXllV_yCZDhHYKf_aAUx

### **TP FINAL**
Micaela Kenigsberg, Gal Rubel y Sophia Grino

Nuestra IA va a resolver un gran problema: ¿Te pareces más a Tom o a Jerry?
Para eso agarramos una base de datos de más de XXXX imágenes etiquetadas como "Tom" o como "Jerry" y mediante el entrenamiento de una IA, nuestro modelo va a ser capas de recibir una foto e identiciar a cuál de los dos personajes se parece más.

## Librerías
"""

import tensorflow as tf
import tensorflow.keras as keras
from tensorflow.keras.utils import image_dataset_from_directory
from tensorflow.keras.regularizers import l2
import numpy as np
from keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from keras_visualizer import visualizer
from tensorflow.keras.utils import plot_model
from google.colab import drive
drive.mount('/content/drive')

validation = image_dataset_from_directory(
    directory = '/content/drive/MyDrive/tom_and_jerry/tom_and_jerry/',
    labels='inferred',
    batch_size=32,
    image_size=(256, 256),
    shuffle=True,
    seed=321,
    validation_split=0.2,
    subset='validation',
)
training = image_dataset_from_directory(
    directory = '/content/drive/MyDrive/tom_and_jerry/tom_and_jerry/',
    labels='inferred',
    batch_size=32,
    image_size=(256, 256),
    shuffle=True,
    seed=321,
    validation_split=0.2,
    subset='training',
)

"""## Código

"""

model =keras.Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(256,256,3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(64, (3, 3), activation='relu'))

model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dense(10))
model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(training, epochs=1,
                    validation_data=(validation))

visualizer(model, file_format='png', view=True)
from PIL import Image
Image.open("graph.png")

plot_model(model, to_file='model.png')

model.save("modeloChona.h5")